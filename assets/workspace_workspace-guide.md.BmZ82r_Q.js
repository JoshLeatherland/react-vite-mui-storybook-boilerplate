import{_ as a,c as e,ae as i,o as n}from"./chunks/framework.Cx07iRtk.js";const k=JSON.parse('{"title":"NPM Workspace Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/workspace-guide.md","filePath":"workspace/workspace-guide.md"}'),t={name:"workspace/workspace-guide.md"};function p(l,s,o,c,r,d){return n(),e("div",null,s[0]||(s[0]=[i(`<h1 id="npm-workspace-introduction" tabindex="-1">NPM Workspace Introduction <a class="header-anchor" href="#npm-workspace-introduction" aria-label="Permalink to &quot;NPM Workspace Introduction&quot;">​</a></h1><p>This document explains the structure and usage of the NPM workspace and provides instructions for adding new projects to the <code>packages</code> folder.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>An <strong>NPM workspace</strong> is a set of related NPM packages that are managed in a single repository. It simplifies dependency management and makes it easy to work across multiple packages simultaneously.</p><p>In this workspace:</p><ul><li>All packages are stored in the <code>packages/</code> directory.</li><li>Shared dependencies can be managed in the root <code>package.json</code>.</li><li>Each package in <code>packages/</code> has its own <code>package.json</code>.</li></ul><h2 id="folder-structure" tabindex="-1">Folder Structure <a class="header-anchor" href="#folder-structure" aria-label="Permalink to &quot;Folder Structure&quot;">​</a></h2><p>The workspace directory structure typically looks like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>root/</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>├── docs/</span></span>
<span class="line"><span>├── packages/</span></span>
<span class="line"><span>│ ├── components/</span></span>
<span class="line"><span>│ │ ├── package.json</span></span>
<span class="line"><span>│ │ └── ...</span></span>
<span class="line"><span>│ ├── modules/</span></span>
<span class="line"><span>│ │ ├── package.json</span></span>
<span class="line"><span>│ │ └── ...</span></span>
<span class="line"><span>│ └── ...</span></span></code></pre></div><ul><li><strong><code>root/package.json</code></strong>: Contains the <code>workspaces</code> field and shared configurations.</li><li><strong><code>packages/</code></strong>: Holds all the individual projects (or packages).</li></ul><h2 id="creating-a-new-project-in-packages" tabindex="-1">Creating a New Project in <code>packages/</code> <a class="header-anchor" href="#creating-a-new-project-in-packages" aria-label="Permalink to &quot;Creating a New Project in \`packages/\`&quot;">​</a></h2><p>To create a new project under the <code>packages/</code> folder:</p><ol><li><p>Navigate to the <code>packages</code> directory:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages</span></span></code></pre></div></li><li><p>Create a project using vite:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite@latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package-name</span></span></code></pre></div></li><li><p>Initial install:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div></li><li><p>Add dependencies as needed:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dependency-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p>Ensure the <code>name</code> field in the <code>package.json</code> is unique across the workspace. For example:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;package-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>If this package depends on other workspace packages, you can reference them directly:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @workspace/components</span></span></code></pre></div></li></ol><h2 id="benefits-of-npm-workspaces" tabindex="-1">Benefits of NPM Workspaces <a class="header-anchor" href="#benefits-of-npm-workspaces" aria-label="Permalink to &quot;Benefits of NPM Workspaces&quot;">​</a></h2><ul><li><strong>Unified Dependency Management</strong>: Shared dependencies can be managed centrally.</li><li><strong>Ease of Development</strong>: Changes to one package can be directly tested in other packages without publishing to a registry.</li><li><strong>Efficient Builds</strong>: Tools like <code>lerna</code> or <code>turbo</code> can optimize builds across workspaces.</li></ul><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2><ul><li><strong>Peer Dependencies</strong>: When adding peer dependencies, ensure they&#39;re installed in the root <code>node_modules</code>.</li><li><strong>Scripts</strong>: Add shared scripts in the root <code>package.json</code> for easier execution:<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm run build --workspaces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm run test --workspaces&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul>`,17)]))}const g=a(t,[["render",p]]);export{k as __pageData,g as default};
